#!/bin/bash

# When a interrupt command is recieved, remove the temp directory and exit the script
trap 'echo; rm -rf gerbrend-temp; exit 130' int

# Initialize default variables:
outline_ext=".*/*\(\.out\|\.oln\|\.gm1\|\.gbr\|\.gml\|\.gko\|\.gm16\|*board\.*\)"
outline=""
drill_ext=".*/*\(\.dri\|\.drl\|\.drd\|\.txt\)"
drill=""
fcu_ext=".*/*\(\.gtl\|\.cmp\|\.top\|\*toplayer*\.ger\|*top*copper\.*\)"
fcu=""
fmask_ext=".*/*\(\.gts\|\.stc\|\.smt\|*topsoldermask*\.ger\|*top*mask\.*\|*top*umask\.*\)"
fmask=""
fsilk_ext=".*/*\(\.gto\|\.sst\|\*topsilkscreen*\.ger\|*top*silk\.*\)"
fsilk=""
bcu_ext=".*/*\(\.gbl\|\.sol\|\.bot\|\*bottomlayer*\.ger\|*bottom*copper\.*\)"
bcu=""
bmask_ext=".*/*\(\.gbs\|\.sts\|\.smb\|*bottomsoldermask*\.ger\|*bottom*mask\.*\|*bottom*umask\.*\)"
bmask=""
bsilk_ext=".*/*\(\.gbo\|\.ssb\|\*bottomsilkscreen*\.ger\|*bottom*silk\.*\)"
bsilk=""
directory="."
resolution="600"
render="0"
front_image_name="front-render.png"
back_image_name="back-render.png"
solder_mask_color="green"
silk_screen_color="white"
copper_color="silver"

version="GerberRender 0.3"
copy="Copyright (c) 2018 Goodtime Development"

# Help function
show_help () {
    	cat << stop
'gerbrend' renders gerber files into png image(s) that represent what the PCB will look 
like in real life. Running the command without any options uses the defaults variables 
to render both the front and back images and searches the local directory for the gerber 
files to use.

Version: $version
$copy

Usage: gerbrend [options....]

Available options:
  -F    Only render the front gerber files
  -B    Only render the back gerber files
  -r    Image resolution
        Default: $resolution
  -p    Solder mask/PCB color. Can only be green, red, blue, yellow, black, or white
        Default: $solder_mask_color
  -w    Silk screen color. Can only be black or white
        Default: $silk_screen_color
  -c    Copper color. Can only be silver and gold
        Default: $copper_color
  -l    Directory location containing the gerber files
        Default: $directory
  -i    File name of the final rendered front image
        Default: $front_image_name
  -j    File name of the final rendered back image
        Default: $back_image_name  
  -o    Outline file path 
  -d    Drill file path
  -f    Front copper file path
  -m    Front solder mask file path
  -s    Front silk screen file path
  -b    Back copper file path
  -n    Back solder mask file path
  -t    Back silk screen file path
  -x    Keep temporary files
  -h    This message
stop
}

# Interpret options. Options proceed by a ':' require an argument
while getopts ":FBxhp:w:c:l:o:d:f:m:s:b:n:t:r:i:j:" opt; do
    case $opt in
    F)  render=$(( 1 | $render ))               ;;
    B)  render=$(( 2 | $render ))               ;;
    p)  solder_mask_color=$OPTARG               ;;
    w)  silk_screen_color=$OPTARG               ;;
    c)  copper_color=$OPTARG                    ;;
    l)  directory="${OPTARG/#\~/$HOME}"         ;;
    o)  outline="${OPTARG/#\~/$HOME}"           ;;
    d)  drill="${OPTARG/#\~/$HOME}"             ;;
    f)  fcu="${OPTARG/#\~/$HOME}"               ;;
    m)  fmask="${OPTARG/#\~/$HOME}"             ;;
    s)  fsilk="${OPTARG/#\~/$HOME}"             ;;
    b)  bcu="${OPTARG/#\~/$HOME}"               ;;
    n)  bmask="${OPTARG/#\~/$HOME}"             ;;
    t)  bsilk="${OPTARG/#\~/$HOME}"             ;;
    r)  resolution=$OPTARG                      ;;
    i)  front_image_name="${OPTARG/#\~/$HOME}"  ;;
    j)  back_image_name="${OPTARG/#\~/$HOME}"   ;;
    x)  keep_temp='true'                        ;;
    h|\?)
        show_help
        exit 0
        ;;
    :)  # An option requiring an argument didn't get passed with one
        echo "ERROR: Option -$OPTARG requires an argument." >&2
        show_help
        exit 1
        ;;
    esac
done

shift $(( $OPTIND - 1 ))

# Function to check if the provided gerber file exists or find the gerber file
check_find_file () {
    # If only two parameters where passes to the function the first one, ie the file name is empty
    if [ $# -eq 2 ]; then
        file=$(find $directory -regextype sed -regex $1 2> /dev/null)
        # Find didn't return any results, thus no gerber file
        if [ -z "$file" ]; then
            echo ERROR: Can\'t find the $2 file in $directory. >&2
            echo Try running the script in the directory containing the gerbers >&2
            exit 1
        fi
        # Find found at least two files
        if [[ $(echo $file | egrep '[^\s] [^\s]') ]]; then
            echo ERROR: Found too many $2 files. >&2
            echo $file
            exit 1
        fi
        # Remove the './' from CWD find results
        # Not necessary but it looks nicer when printed on the screen
        if [ $directory == '.' ]; then
            file=$(echo $file | cut -d'/' -f 2)
        fi
    # The file was provided as an option
    else
        # The provided file does not exist
        if [ ! -f $1 ]; then
            echo ERROR: No $3 file >&2
            exit 1
        fi
        file=$1
    fi
}

check_find_file $outline $outline_ext "outline"
outline=$file
echo 'Outline file:           '$outline

check_find_file $drill $drill_ext "drill"
drill=$file
echo 'Drill file:             '$drill

find_front_files () {
    check_find_file $fcu $fcu_ext "front copper"
    fcu=$file
    echo 'Front copper file:      '$fcu

    check_find_file $fmask $fmask_ext "front solder mask"
    fmask=$file
    echo 'Front solder mask file: '$fmask

    check_find_file $fsilk $fsilk_ext "front silk screen"
    fsilk=$file
    echo 'Front silk screen file: '$fsilk
}

find_back_files () {
    check_find_file $bcu $bcu_ext "back copper"
    bcu=$file
    echo 'Back copper file:       '$bcu

    check_find_file $bmask $bmask_ext "back solder mask"
    bmask=$file
    echo 'Back solder mask file:  '$bmask

    check_find_file $bsilk $bsilk_ext "back silk screen"
    bsilk=$file
    echo 'Back silk screen file:  '$bsilk
}

# $render equals 0 if neither --front nor --back was passed as an option,
# or it equals 3 if both were passed as options
if [ "$render" -eq 0 -o "$render" -eq 3 ]; then
    find_front_files
    find_back_files
# Only --front was passed as an option
elif [ "$render" -eq 1 ]; then 
    find_front_files
# Only --back was passed as an option
elif [ "$render" -eq 2 ]; then
    find_back_files
else
    echo ERROR: Something happened. Nothing is being rendered. >&2
    exit 1
fi

solder_mask_color=${solder_mask_color,,}
case $solder_mask_color in
green)  mcolor='#225533'    ;;
red)    mcolor='#CC0000'    ;;
blue)   mcolor='#00284A'    ;;
yellow) mcolor='#EDD400'    ;;
black)  mcolor='#2D2D2D'    ;;
white)  mcolor='#E6E6E6'    ;;
*) 
    echo ERROR: unknown solder mask color. >&2
    echo Can only be green, red, blue, yellow, black, or white >&2
    exit 1
    ;;
esac
# Create a slightly transparent version of the solder mask color
mcoloralpha=$mcolor'bb'

silk_screen_color=${silk_screen_color,,}
case $silk_screen_color in
black)  scolor='#1D1D1DFF'  ;;
white)  scolor='#EEEEEEFF'  ;;
*) 
    echo ERROR: unknown silk screen color. >&2
    echo Can only be black, or white >&2
    exit 1
    ;;
esac

copper_color=${copper_color,,}
case $copper_color in
silver) ccolor='#8A8A8A'    ;;
gold)   ccolor='#E3bd91'    ;;
*) 
    echo ERROR: unknown copper color. >&2
    echo Can only be silver or gold >&2
    exit 1
    ;;
esac

render_front () {
    #### OUTLINE #####
    echo -ne Rendering front outline layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/foutline.png \
    -f '#000000FF' $outline \
    -f '#FF0000FF' $drill \
    -f '#FFFFFFFF' $fcu \
    -f '#FFFFFFFF' $fsilk \
    -f '#FFFFFFFF' $fmask

    echo -ne  Converting colors... 
    # Color the region outside the outline red
    convert gerbrend-temp/foutline.png -bordercolor '#FFFFFF' -border 1 \
    -fill '#FF0000' -floodfill +0,+0 '#FFFFFF' -shave 1x1 png32:gerbrend-temp/foutline.png
    # Fill inside of outline the color of the PCB
    convert gerbrend-temp/foutline.png -fill $mcolor -opaque '#FFFFFF' png32:gerbrend-temp/foutline.png
    # Make everything that is red transparent, ie the holes and the outside 
    convert gerbrend-temp/foutline.png -transparent '#FF0000' png32:gerbrend-temp/foutline.png
    echo Done!

    #### COPPER #####
    echo -ne Rendering front copper layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/fcu.png \
    -f '#FFFFFFFF' $drill \
    -f '#000000FF' $fcu \
    -f '#FFFFFFFF' $outline \
    -f '#FFFFFFFF' $fsilk \
    -f '#FFFFFFFF' $fmask

    echo -ne  Converting colors... 
    # Convert the copper traces from black to the trace color
    convert gerbrend-temp/fcu.png -fill $ccolor -opaque '#000000' png32:gerbrend-temp/fcu.png
    # Make everything that is white transparent
    convert gerbrend-temp/fcu.png -transparent '#FFFFFF' png32:gerbrend-temp/fcu.png
    echo Done!

    #### SOLDER MASK #####
    echo -ne Rendering front solder mask layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/fmask.png \
    -f '#000000FF' $outline \
    -f '#FF0000FF' $fmask \
    -f '#FFFFFFFF' $fcu \
    -f '#FFFFFFFF' $fsilk \
    -f '#FFFFFFFF' $drill

    echo -ne  Converting colors... 
    # Color the region outside the outline red
    convert gerbrend-temp/fmask.png -bordercolor '#FFFFFF' -border 1 \
    -fill '#FF0000' -floodfill +0,+0 '#FFFFFF' -shave 1x1 png32:gerbrend-temp/fmask.png
    # Convert the solder mask to the PCB color
    convert gerbrend-temp/fmask.png -channel RGBA -fill $mcoloralpha -opaque '#FFFFFF' png32:gerbrend-temp/fmask.png
    # Make everything that is red transparent
    convert gerbrend-temp/fmask.png -transparent '#FF0000' png32:gerbrend-temp/fmask.png
    echo Done!

    #### SILK SCREEN #####
    echo -ne Rendering front silk screen layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/fsilk.png \
    -f $scolor $fsilk \
    -f '#FFFFFFFF' $fmask \
    -f '#FFFFFFFF' $drill \
    -f '#FFFFFFFF' $fcu \
    -f '#FFFFFFFF' $outline

    echo -ne  Converting colors... 
    # Make everything that is white transparent
    convert gerbrend-temp/fsilk.png -transparent '#FFFFFF' png32:gerbrend-temp/fsilk.png
    echo Done!

    #### FINAL IMAGE #####
    echo -ne Combining front layers...
    convert gerbrend-temp/foutline.png \
    gerbrend-temp/fcu.png \
    gerbrend-temp/fmask.png \
    gerbrend-temp/fsilk.png \
    -background none -flatten \
    png32:gerbrend-temp/ffinal.png
    # Copy final image to destination
    cp gerbrend-temp/ffinal.png $front_image_name
    echo Done!
}

render_back () {
    #### OUTLINE #####
    echo -ne Rendering back outline layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/boutline.png \
    -f '#000000FF' $outline \
    -f '#FF0000FF' $drill \
    -f '#FFFFFFFF' $bcu \
    -f '#FFFFFFFF' $bsilk \
    -f '#FFFFFFFF' $bmask

    echo -ne  Converting colors... 
    # Color the region outside the outline red
    convert gerbrend-temp/boutline.png -bordercolor '#FFFFFF' -border 1 \
    -fill '#FF0000' -floodfill +0,+0 '#FFFFFF' -shave 1x1 png32:gerbrend-temp/boutline.png
    # Fill inside of outline the color of the PCB
    convert gerbrend-temp/boutline.png -fill $mcolor -opaque '#FFFFFF' png32:gerbrend-temp/boutline.png
    # Make everything that is red transparent, ie the holes and the outside 
    convert gerbrend-temp/boutline.png -transparent '#FF0000' png32:gerbrend-temp/boutline.png
    echo Done!

    #### COPPER #####
    echo -ne Rendering back copper layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/bcu.png \
    -f '#FFFFFFFF' $drill \
    -f '#000000FF' $bcu \
    -f '#FFFFFFFF' $outline \
    -f '#FFFFFFFF' $bsilk \
    -f '#FFFFFFFF' $bmask

    echo -ne  Converting colors... 
    # Convert the copper traces from black to the trace color
    convert gerbrend-temp/bcu.png -fill $ccolor -opaque '#000000' png32:gerbrend-temp/bcu.png
    # Make everything that is white transparent
    convert gerbrend-temp/bcu.png -transparent '#FFFFFF' png32:gerbrend-temp/bcu.png
    echo Done!

    #### SOLDER MASK #####
    echo -ne Rendering back solder mask layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/bmask.png \
    -f '#000000FF' $outline \
    -f '#FF0000FF' $bmask \
    -f '#FFFFFFFF' $bcu \
    -f '#FFFFFFFF' $bsilk \
    -f '#FFFFFFFF' $drill

    echo -ne  Converting colors... 
    # Color the region outside the outline red
    convert gerbrend-temp/bmask.png -bordercolor '#FFFFFF' -border 1 \
    -fill '#FF0000' -floodfill +0,+0 '#FFFFFF' -shave 1x1 png32:gerbrend-temp/bmask.png
    # Convert the solder mask to the PCB color
    convert gerbrend-temp/bmask.png -channel RGBA -fill $mcoloralpha -opaque '#FFFFFF' png32:gerbrend-temp/bmask.png
    # Make everything that is red transparent
    convert gerbrend-temp/bmask.png -transparent '#FF0000' png32:gerbrend-temp/bmask.png
    echo Done!

    #### SILK SCREEN #####
    echo -ne Rendering back silk screen layer... 
    gerbv -x png -D $resolution -B 1 -b '#FFFFFF' -o gerbrend-temp/bsilk.png \
    -f $scolor $bsilk \
    -f '#FFFFFFFF' $drill \
    -f '#FFFFFFFF' $bcu \
    -f '#FFFFFFFF' $outline \
    -f '#FFFFFFFF' $bmask

    echo -ne  Converting colors... 
    # Make everything that is white transparent
    convert gerbrend-temp/bsilk.png -transparent '#FFFFFF' png32:gerbrend-temp/bsilk.png
    echo Done!

    #### FINAL IMAGE #####
    echo -ne Combining back layers...
    convert gerbrend-temp/boutline.png \
    gerbrend-temp/bcu.png \
    gerbrend-temp/bmask.png \
    gerbrend-temp/bsilk.png \
    -background none -flatten -flop \
    png32:gerbrend-temp/bfinal.png
    # Copy final image to destination
    cp gerbrend-temp/bfinal.png $back_image_name
    echo Done!   
}

# Make a temporary directory to store all the intermediate steps
if [ ! -d gerbrend-temp ]; then
    mkdir gerbrend-temp
else
    # If the directory already, we'll just keep it after the script is done running to prevent anything bad from happening
    keep_temp=true
fi

# $render equals 0 if neither --front nor --back was passed as an option,
# or it equals 3 if both were passed as options
if [ "$render" -eq 0 -o "$render" -eq 3 ]; then
    render_front
    render_back
# Only --front was passed as an option
elif [ "$render" -eq 1 ]; then 
    render_front
# Only --back was passed as an option
elif [ "$render" -eq 2 ]; then
    render_back
fi

# Remove the temporary directory if keep temp flag wasn't set
if [ -z $keep_temp ]; then
    rm -rf gerbrend-temp
fi

exit 0
